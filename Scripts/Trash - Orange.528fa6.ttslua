local moveList   = {'Encounter', 'Encounter2', 'Enemy', 'Location', 'Treachery'}
local deleteList = {'Archery', 'Wound', 'Willpower', 'Attack', 'Defense', 'Resource', 'Threat', 'Progress', 'Generic'}
local bSize = {x=self.getBounds().size.x, y=self.getBounds().size.y, z=self.getBounds().size.z}
loop = true
Y = nil

function setPrams(obj,key) -- Set Prams based on the the object dropped.
    Y = Y + 0.5
    local setPrams = {}
    -- Set CARDS
    if obj.name == 'Encounter' then setPrams = {guid = obj.guid, position = {18.14, Y, 27.66}, rotation = {0, 180, 0}} end
    if obj.name == 'Enemy' then setPrams = {guid = obj.guid, position = {17.08, Y, 26.01}, rotation = {0, 180, 0}} end
    if obj.name == 'Location' then setPrams = {guid = obj.guid, position = {17.08, Y, 26.01}, rotation = {0, 180, 0}} end
    if obj.name == 'Treachery' then setPrams = {guid = obj.guid, position = {17.08, Y, 26.01}, rotation = {0, 180, 0}} end
    if obj.name == 'Encounter2' then setPrams = {guid = obj.guid, position = {18.14, Y, 35.08}, rotation = {0, 180, 0}} end
    if obj.name == 'three' then setPrams = {guid = obj.guid, position = {-8.45, Y, -2.21}, rotation = {0, 180, 0}} end
    if obj.name == 'four' then setPrams = {guid = obj.guid, position = {-8.50, Y, 1.51}, rotation = {0, 180, 0}} end
    if obj.name == 'five' then setPrams = {guid = obj.guid, position = {-6.02, Y, 1.51}, rotation = {0, 180, 0}} end
    if obj.name == 'six' then setPrams = {guid = obj.guid, position = {-5.87, Y, -2.27}, rotation = {0, 180, 0}} end
    -- Set objects
    if obj.name == 'Cube' then setPrams = {guid = obj.guid, position = {19.83, Y, 0.19}, rotation = {0, 180, 0}} end
    if obj.name == 'BlueBlock' then setPrams = {guid = obj.guid, position = {-18.53, Y, 5.37}, rotation = {0, 180, 0}} end
    --
    return setPrams
end

function processList(objectsInBag)
    Y = setY()
    checkDelete(objectsInBag)
    checkMove(objectsInBag)
    checkDeck(objectsInBag) -- if you only need to move to a single deck location, comment this out and ste it in the move list!
end

function onload()
    math.randomseed(os.time())
end

function onCollisionEnter(obj)
    if loop == true then processList(self.getObjects()) end
end

function setY()
    local pos = self.getPosition()
    local Y = pos.y + self.getBoundsNormalized().size.y + 3
    return Y
end

function checkDeck(objectsInBag)
    function checkDeck_CORE()
        -- Find Any Decks
        local deckList = {}
        for _, foundDecks in ipairs(objectsInBag) do
            if foundDecks.name == 'Deck' then
                local prams = {position={0, -20, 0}, guid = foundDecks.guid}
                table.insert(deckList, prams)
            end
        end

        --Take decks and put contents in bag
        local decks = {}
        for i, prams in ipairs(deckList) do
            local d = self.takeObject(prams)
            table.insert(decks, d)
            d.setLock(false)
        end
        coroutine.yield(0)
        for _, d in ipairs(decks) do
            for i=1, #d.getObjects()-1, 1 do
                c = d.takeObject({position={0,-20,0}})
                self.putObject(c)
            end
        end
    return 1
    end
   startLuaCoroutine(self, 'checkDeck_CORE')
end

--Reverses a table
function reverseTable(t)
    local reversedTable = {}
    local itemCount = #t
    for k, v in ipairs(t) do
        reversedTable[itemCount + 1 - k] = v
    end
    return reversedTable
end

--Coroutine delay, in seconds
function wait(time)
    local start = os.time()
    repeat coroutine.yield(0) until os.time() > start + time
end

function checkMove(objectsInBag)
    local mvLIST = {}
    local loopFix = true
    ---Test for MOVING and store the GUID of those objects (using a nameList)
       for _, obj in ipairs(objectsInBag) do
           --print(obj.guid)
            for _, key in ipairs(moveList) do
               if string.match(obj.name, key) then
                   if loopFix == true then
                      -- print('    : '..obj.name)
                       local prams = setPrams(obj,key)
                       table.insert(mvLIST, prams)
                   end
                  loopFix = false
               end
            end
            loopFix = true
        end

    ---Loop though the ORIGINAL bag and take objects to move location (moveLIST)
        local yy = nil
        local setPos = false
        for _, prams in ipairs(mvLIST) do
            if yy == nil then yy = prams.position[2] end
            local o = self.takeObject(prams)
            o.setPositionSmooth({prams.position[1], yy, prams.position[3]}, false, false) -- + obj.getBoundsNormalized().size.y
            yy = yy + o.getBoundsNormalized().size.y+0.1
        end
end

function checkDelete(objectsInBag)
    local deleteME = {}
    ---Test for DELETION and store the GUID of those objects (using a nameList)
    for _, obj in ipairs(objectsInBag) do
       for _, key in ipairs(deleteList) do
           if obj.name == key then
               local prams = {}
                     prams.guid = obj.guid
                     prams.position = {0, -25, 0}
               table.insert(deleteME, prams)
           end
       end
    end
    ---Loop though the bag and take out objects by GUID and then destroy them (delList)
    for _, prams in ipairs(deleteME) do
      local obj = self.takeObject(prams)
      obj.destruct()
    end
end